-- UTILS
--Recursive print of tables similar to PHP print_r function
function print_r(t) 
    local print_r_cache={}
    local function sub_print_r(t,indent)
        if (print_r_cache[tostring(t)]) then
            printf(indent.."*"..tostring(t))
        else
            print_r_cache[tostring(t)]=true
            if (type(t)=="table") then
                for pos,val in pairs(t) do
                    if (type(val)=="table") then
                        printf(indent.."["..pos.."] => "..tostring(t).." {")
                        sub_print_r(val,indent..string.rep(" ",string.len(pos)+8))
                        printf(indent..string.rep(" ",string.len(pos)+6).."}")
                    else
                        printf(indent.."["..pos.."] => "..tostring(val))
                    end
                end
            else
                printf(indent..tostring(t))
            end
        end
    end
    sub_print_r(t,"  ")
end

--Protected function call to prevent crashes to desktop
--Prints error in console if occured, otherwise proceed normally
--Use for test only, slower than usual
function try(func, ...)
    local status, error_or_result = pcall(func, ...)
    if not status then
        printf(error_or_result)
    end
    return error_or_result, status
end

function shuffle(t)
   local s = {}
   for i = 1, #t do s[i] = t[i] end
   for i = #t, 2, -1 do
     local j = math.random(i)
     s[i], s[j] = s[j], s[i]
   end
   return s
end

-- Find artefact in a container
local string_find = string.find
function get_artefact_from_container(sec)
    local sec = sec
    local cont
    if (string_find(sec, "(lead.-_box)",3)) then
        sec = sec:gsub("_lead_box", "")
        cont = "lead_box"
    elseif (string_find(sec, "(af.-_iam)",3)) then
        sec = sec:gsub("_af_iam", "")
        cont = "af_iam"
    elseif (string_find(sec, "(af.-_aac)",3)) then
        sec = sec:gsub("_af_aac", "")
        cont = "af_aac"
    elseif (string_find(sec, "(af.-_aam)",3)) then
        sec = sec:gsub("_af_aam", "")
        cont = "af_aam"
    end
    return sec, cont
end

function get_artefact_base(sec)
    local sec = get_artefact_from_container(sec)
    if string_find(sec, "variationizer") then
        sec = sec:gsub("_variationizer.*", "")
    end
    return sec
end

local translate_string = game.translate_string
local string_format = string.format
local function print_tip(text, ...)
    local ico = "ui_inGame2_Dengi_otdani"
    local text_color = utils_xml.get_color("pda_white")
    local arg_color = utils_xml.get_color("d_green")
    local t = {...}
    for k, v in pairs(t) do
        t[k] = arg_color .. tostring(t[k]) .. text_color
    end
    text = "%" .. text_color .. translate_string(text)
    news_manager.send_tip(db.actor, string_format(text, unpack(t)), nil, ico, 6000)
end

-- Variationizer
max_artefacts = 30
valid_artys = {
    ["af_itcher"] = true,
    ["af_pin"] = true,
    ["af_cristall"] = true,
    ["af_fireball"] = true,
    ["af_blood"] = true,
    ["af_mincer_meat"] = true,
    ["af_bracelet"] = true,
    ["af_baloon"] = true,
    ["af_electra_sparkler"] = true,
    ["af_sponge"] = true,
    ["af_ring"] = true,
    ["af_electra_flash"] = true,
    ["af_cristall_flower"] = true,
    ["af_lobster_eyes"] = true,
    ["af_electra_moonlight"] = true,
    ["af_black_spray"] = true,
    ["af_medusa"] = true,
    ["af_vyvert"] = true,
    ["af_empty"] = true,
    ["af_full_empty"] = true,
    ["af_night_star"] = true,
    ["af_gravi"] = true,
    ["af_gold_fish"] = true,
    ["af_dummy_glassbeads"] = true,
    ["af_eye"] = true,
    ["af_fire"] = true,
    ["af_dummy_battery"] = true,
    ["af_dummy_dummy"] = true,
    ["af_ice"] = true,
    ["af_soul"] = true,
    ["af_fuzz_kolobok"] = true,
    ["af_glass"] = true,
    ["af_death_lamp"] = true,
}

local tg = 0
local tg_interval = 1000
local update_countdown = 3

function generate()
    local res, status = try(function()
        if ui_mcm and ui_mcm.get("artefact_variationizer/generate") then
            ui_mcm.set("artefact_variationizer/generate", false)

            local artys = {}
            local artys_cont = {}
            ini_sys:section_for_each(function(sec)
                -- if SYS_GetParam(0, sec, "kind", "") == "i_arty" and not string.find(sec, "variationizer") then
                if valid_artys[sec] then
                    local absorb = SYS_GetParam(0, sec, "artefact_resists") or SYS_GetParam(0, sec, "hit_absorbation_sect")
                    if absorb and ini_sys:section_exist(absorb) then
                        artys[sec] = {}
                        artys[sec].section = utils_data.collect_section(ini_sys, sec, true)
                        artys[sec].resists = utils_data.collect_section(ini_sys, absorb, true)
                    end

                    -- Containers
                    local containers = {"lead_box", "af_iam", "af_aac", "af_aam"}
                    for _, v in ipairs(containers) do
                        local cont = sec .. "_" .. v
                        if ini_sys:section_exist(cont) then
                            artys_cont[cont] = {}
                            artys_cont[cont].section = utils_data.collect_section(ini_sys, cont, true)
                        end
                    end
                end
            end)
            -- print_r(artys_cont)

            local generated_artys = {}

            local function generate_new_sec(sec, n)
                return sec .. "_variationizer" .. n
            end

            local function add_arty(sec, n, tier, new_artys)
                local new_sec = generate_new_sec(sec, n)
                generated_artys[new_sec] = {}
                generated_artys[new_sec].section = dup_table(artys[sec].section)
                generated_artys[new_sec].section.variationizer_tier = tier

                if artys[sec].section.artefact_resists then
                    generated_artys[new_sec].section.artefact_resists = new_sec .. "_resists"
                end
                generated_artys[new_sec].section.hit_absorbation_sect = new_sec .. "_absorbation"

                generated_artys[new_sec].resists = dup_table(artys[sec].resists)
                new_artys[#new_artys + 1] = generated_artys[new_sec]
                return new_sec
            end

            local function add_arty_cont(new_sec, sec)
                local containers = {"lead_box", "af_iam", "af_aac", "af_aam"}
                for _, v in ipairs(containers) do
                    local cont_sec = sec .. "_" .. v
                    local new_cont_sec = new_sec .. "_" .. v
                    generated_artys[new_cont_sec] = dup_table(artys_cont[cont_sec])
                    generated_artys[new_cont_sec].section.inv_weight = SYS_GetParam(2, v, "inv_weight", 2) + generated_artys[new_sec].section.inv_weight
                    generated_artys[new_cont_sec].section.variationizer_tier = generated_artys[new_sec].section.variationizer_tier
                    if v == "lead_box" then
                        local t = generated_artys[new_sec].section
                        local t_cont = generated_artys[new_cont_sec].section

                        if t_cont.radiation_restore_speed then
                            t_cont.radiation_restore_speed = t.radiation_restore_speed - 0.00047
                            t_cont.radiation_restore_speed = math.max(t_cont.radiation_restore_speed, 0)
                        end
                    else
                        local t = generated_artys[new_sec].section
                        local t_cont = generated_artys[new_cont_sec].section

                        t_cont.additional_inventory_weight = t.additional_inventory_weight
                        t_cont.additional_inventory_weight2 = t.additional_inventory_weight2
                        t_cont.bleeding_restore_speed = t.bleeding_restore_speed
                        t_cont.health_restore_speed = t.health_restore_speed
                        t_cont.power_restore_speed = t.power_restore_speed
                        t_cont.satiety_restore_speed = t.satiety_restore_speed

                        if t.artefact_resists then
                            t_cont.artefact_resists = t.artefact_resists
                        end
                        t_cont.hit_absorbation_sect = t.hit_absorbation_sect

                        if v == "af_iam" then
                            t_cont.radiation_restore_speed = t.radiation_restore_speed - 0.00013
                        elseif v == "af_aac" then
                            t_cont.radiation_restore_speed = t.radiation_restore_speed - 0.00025
                        else
                            t_cont.radiation_restore_speed = t.radiation_restore_speed - 0.00047
                        end
                        t_cont.radiation_restore_speed = math.max(t_cont.radiation_restore_speed, 0)
                    end
                end
            end

            for sec, v in pairs(artys) do
                local n = 0
                local new_artys = {}
                for i = 1, 8 do -- Common
                    n = n + 1
                    local new_sec = add_arty(sec, n, 1, new_artys)

                    local t = generated_artys[new_sec].section
                    t.cost = math.ceil(t.cost * random_float(0.85, 1.15))
                    t.inv_weight = round_idp(t.inv_weight * random_float(0.8, 1.4), 2)
                    t.additional_inventory_weight = round_idp(t.additional_inventory_weight * random_float(0.85, 1.15), 3)
                    t.additional_inventory_weight2 = t.additional_inventory_weight
                    t.bleeding_restore_speed = round_idp(t.bleeding_restore_speed * random_float(0.85, 1.15), 6)
                    t.health_restore_speed = round_idp(t.health_restore_speed * random_float(0.85, 1.15), 6)
                    t.power_restore_speed = round_idp(t.power_restore_speed * random_float(0.85, 1.15), 6)
                    t.radiation_restore_speed = round_idp(t.radiation_restore_speed * random_float(0.85, 1.15), 6)
                    t.satiety_restore_speed = round_idp(t.satiety_restore_speed * random_float(0.85, 1.15), 6)

                    for res, val in pairs(generated_artys[new_sec].resists) do
                        generated_artys[new_sec].resists[res] = round_idp(generated_artys[new_sec].resists[res] * random_float(0.85, 1.15), 6)
                    end

                end
                for i = 1, 7 do -- Uncommon
                    n = n + 1
                    local new_sec = add_arty(sec, n, 2, new_artys)
                    local t = generated_artys[new_sec].section

                    local function alter(r, reverse, prec, min, max, rev_min, rev_max)
                        local min = min or 1.1
                        local max = max or 1.2
                        local rev_min = rev_min or 0.8
                        local rev_max = rev_max or 0.9
                        local prec = prec or 6

                        local r = tonumber(r)
                        if reverse then
                            if r < 0 then
                                r = round_idp(r * random_float(min, max), prec)
                            else
                                r = round_idp(r * random_float(rev_min, rev_max), prec)
                            end
                        else
                            if r > 0 then
                                r = round_idp(r * random_float(min, max), prec)
                            else
                                r = round_idp(r * random_float(rev_min, rev_max), prec)
                            end
                        end
                        return r
                    end

                    t.cost = math.ceil(t.cost * random_float(1.1, 1.2))
                    t.inv_weight = round_idp(t.inv_weight * random_float(0.8, 1.4), 2)
                    t.additional_inventory_weight = alter(t.additional_inventory_weight, false, 3)
                    t.additional_inventory_weight2 = t.additional_inventory_weight
                    t.bleeding_restore_speed = alter(t.bleeding_restore_speed)
                    t.health_restore_speed = alter(t.health_restore_speed)
                    t.power_restore_speed = alter(t.power_restore_speed)
                    t.radiation_restore_speed = alter(t.radiation_restore_speed, true)
                    t.satiety_restore_speed = alter(t.satiety_restore_speed)

                    for res, val in pairs(generated_artys[new_sec].resists) do
                        generated_artys[new_sec].resists[res] = alter(val)
                    end
                end
                for i = 1, 6 do -- Rare
                    n = n + 1
                    local new_sec = add_arty(sec, n, 3, new_artys)
                    local t = generated_artys[new_sec].section

                    local function alter(r, reverse, prec, min, max, rev_min, rev_max)
                        local min = min or 1.25
                        local max = max or 1.4
                        local rev_min = rev_min or 0.7
                        local rev_max = rev_max or 0.8
                        local prec = prec or 6

                        local r = tonumber(r)
                        if reverse then
                            if r < 0 then
                                r = round_idp(r * random_float(min, max), prec)
                            else
                                r = round_idp(r * random_float(rev_min, rev_max), prec)
                            end
                        else
                            if r > 0 then
                                r = round_idp(r * random_float(min, max), prec)
                            else
                                r = round_idp(r * random_float(rev_min, rev_max), prec)
                            end
                        end
                        return r
                    end

                    t.cost = math.ceil(t.cost * random_float(1.25, 1.4))
                    t.inv_weight = round_idp(t.inv_weight * random_float(1.2, 1.6), 2)
                    t.additional_inventory_weight = alter(t.additional_inventory_weight, false, 3)
                    t.additional_inventory_weight2 = t.additional_inventory_weight
                    t.bleeding_restore_speed = alter(t.bleeding_restore_speed)
                    t.health_restore_speed = alter(t.health_restore_speed)
                    t.power_restore_speed = alter(t.power_restore_speed)
                    t.radiation_restore_speed = alter(t.radiation_restore_speed, true, 6, 1.25, 1.4, 0.4, 0.6)
                    t.satiety_restore_speed = alter(t.satiety_restore_speed)

                    for res, val in pairs(generated_artys[new_sec].resists) do
                        generated_artys[new_sec].resists[res] = alter(val)
                    end
                end
                for i = 1, 5 do  -- Epic
                    n = n + 1
                    local new_sec = add_arty(sec, n, 4, new_artys)
                    local t = generated_artys[new_sec].section

                    local function alter(r, reverse, prec, min, max, rev_min, rev_max)
                        local min = min or 1.35
                        local max = max or 1.55
                        local rev_min = rev_min or 0.6
                        local rev_max = rev_max or 0.7
                        local prec = prec or 6

                        local r = tonumber(r)
                        if math.random(100) < 20 and r < 0 then
                            r = -r * random_float(1 - rev_min, 1 - rev_max)
                        elseif reverse then
                            if r < 0 then
                                r = round_idp(r * random_float(min, max), prec)
                            else
                                r = round_idp(r * random_float(rev_min, rev_max), prec)
                            end
                        else
                            if r > 0 then
                                r = round_idp(r * random_float(min, max), prec)
                            else
                                r = round_idp(r * random_float(rev_min, rev_max), prec)
                            end
                        end
                        return r
                    end

                    t.cost = math.ceil(t.cost * random_float(1.4, 1.65))
                    t.inv_weight = round_idp(t.inv_weight * random_float(1.2, 1.7), 2) + 1
                    t.additional_inventory_weight = alter(t.additional_inventory_weight, false, 3)
                    t.additional_inventory_weight2 = t.additional_inventory_weight
                    t.bleeding_restore_speed = alter(t.bleeding_restore_speed)
                    t.health_restore_speed = alter(t.health_restore_speed)
                    t.power_restore_speed = alter(t.power_restore_speed)

                    t.radiation_restore_speed = tonumber(t.radiation_restore_speed)
                    if t.radiation_restore_speed > 0 then
                        if math.random(100) < 30 then
                            t.radiation_restore_speed = 0
                        else
                            t.radiation_restore_speed = math.max(0, t.radiation_restore_speed * random_float(-0.05, 0.24))
                        end
                    else
                        t.radiation_restore_speed = t.radiation_restore_speed * random_float(1.3, 1.5)
                    end

                    t.satiety_restore_speed = alter(t.satiety_restore_speed)

                    for res, val in pairs(generated_artys[new_sec].resists) do
                        generated_artys[new_sec].resists[res] = alter(val)
                    end
                end
                for i = 1, 4 do  -- Legendary
                    n = n + 1
                    local new_sec = add_arty(sec, n, 5, new_artys)
                    local t = generated_artys[new_sec].section

                    local function alter(r, reverse, prec, min, max, rev_min, rev_max)
                        local min = min or 1.6
                        local max = max or 2
                        local rev_min = rev_min or 0.5
                        local rev_max = rev_max or 0.6
                        local prec = prec or 6

                        local r = tonumber(r)
                        if math.random(100) < 50 and r < 0 then
                            r = -r * random_float(1 - rev_min, 1 - rev_max)
                        elseif reverse then
                            if r < 0 then
                                r = round_idp(r * random_float(min, max), prec)
                            else
                                r = round_idp(r * random_float(rev_min, rev_max), prec)
                            end
                        else
                            if r > 0 then
                                r = round_idp(r * random_float(min, max), prec)
                            else
                                r = round_idp(r * random_float(rev_min, rev_max), prec)
                            end
                        end
                        return r
                    end

                    t.cost = math.ceil(t.cost * random_float(1.6, 1.9))
                    t.inv_weight = round_idp(t.inv_weight * random_float(1.6, 1.9), 2) + 1
                    t.additional_inventory_weight = alter(t.additional_inventory_weight, false, 3)
                    t.additional_inventory_weight2 = t.additional_inventory_weight
                    t.bleeding_restore_speed = alter(t.bleeding_restore_speed)
                    t.health_restore_speed = alter(t.health_restore_speed)
                    t.power_restore_speed = alter(t.power_restore_speed)

                    t.radiation_restore_speed = tonumber(t.radiation_restore_speed)
                    if t.radiation_restore_speed > 0 then
                        if math.random(100) < 50 then
                            t.radiation_restore_speed = -t.radiation_restore_speed * random_float(0.3, 0.4)
                        else
                            t.radiation_restore_speed = 0
                        end
                    else
                        t.radiation_restore_speed = t.radiation_restore_speed * random_float(1.6, 1.8)
                    end

                    t.satiety_restore_speed = alter(t.satiety_restore_speed)

                    for res, val in pairs(generated_artys[new_sec].resists) do
                        generated_artys[new_sec].resists[res] = alter(val)
                    end
                end

                -- Limit radiation to all but death lamp
                if sec ~= "af_death_lamp" then
                    for i, v in ipairs(new_artys) do
                        local new_sec = generate_new_sec(sec, i)
                        generated_artys[new_sec].section.radiation_restore_speed = math.min(0.00047, generated_artys[new_sec].section.radiation_restore_speed)
                    end
                end

                -- Shuffle artys
                new_artys = shuffle(new_artys)
                for i, v in ipairs(new_artys) do
                    local new_sec = generate_new_sec(sec, i)
                    generated_artys[new_sec] = v
                end

                -- Containerize artys
                for i, v in ipairs(new_artys) do
                    local new_sec = generate_new_sec(sec, i)
                    add_arty_cont(new_sec, sec)
                end

            end

            --print_r(generated_artys)

            local ini_cc = ini_file_ex("items\\items\\items_artefacts_zzvariation.ltx",true)
            
            for sec, v in spairs(generated_artys) do
                for k1, v1 in spairs(v.section) do
                    ini_cc:w_value(sec, k1, v1)
                end

                if v.resists then
                    if v.section.artefact_resists then  
                        for k1, v1 in spairs(v.resists) do
                            ini_cc:w_value(v.section.artefact_resists, k1, v1)
                            ini_cc:w_value(v.section.hit_absorbation_sect, k1, 0)
                        end
                    else 
                        for k1, v1 in spairs(v.resists) do
                            ini_cc:w_value(v.section.hit_absorbation_sect, k1, v1)
                        end
                    end
                end
            end

            ini_cc:save()
            printf("Saved in items_artefacts_zzvariation.ltx")
            return true
        end
    end)

    if not status then
        print_tip("st_variationizer_error", res)
    elseif res then
        print_tip("st_variationizer_success")
        update_countdown = 4
        RegisterScriptCallback("actor_on_update", restart)
    end
end


function restart()
    local t = time_global()
    if t < tg then return end
    tg = t + tg_interval

    update_countdown = update_countdown - 1
    print_tip(tostring(update_countdown))

    if update_countdown <= 0 then
        update_countdown = 4
        UnregisterScriptCallback("actor_on_update", restart)
        reload_ini_sys()
        ui_debug_launcher.reload_textures()
    end
end

function delete_artys()
    if ui_mcm and ui_mcm.get("artefact_variationizer/delete_artys") then
        ui_mcm.set("artefact_variationizer/delete_artys", false)
        for i = 1, 65534 do
            local obj = alife_object(i)
            if obj then
                local sec = obj:section_name()
                if string.find(sec, "variationizer") then
                    local sec, cont = get_artefact_from_container(sec)
                    alife_release(obj)
                    if cont then
                        alife_create_item(cont, db.actor)
                    end
                end
            end
        end
    end
end

function on_game_start()
    RegisterScriptCallback("on_option_change", generate)
    RegisterScriptCallback("on_option_change", delete_artys)
end

-- Patches
local function insert_n_times(t, item, n)
    local n = n or 1
    for i = 1, n do
        table.insert(t, item)
    end
end

local artefact_chances = (function()
    local t = {}
    insert_n_times(t, 1, 10)
    insert_n_times(t, 2, 6)
    insert_n_times(t, 3, 3)
    insert_n_times(t, 4, 2)
    insert_n_times(t, 5, 1)
    return t
end)()

local artefact_by_variationizer_tier = (function()
    local t = {}
    ini_sys:section_for_each(function(sec)
        if valid_artys[sec] then
            local tier = SYS_GetParam(2, sec, "variationizer_tier", 1)
            if not t[sec] then t[sec] = {} end
            if not t[sec][tier] then t[sec][tier] = {} end
            table.insert(t[sec][tier], sec)
            for i = 1, max_artefacts do
                local s = sec .. "_variationizer" .. i
                if ini_sys:section_exist(s) then
                    local tier = SYS_GetParam(2, s, "variationizer_tier", 1)
                    if not t[sec][tier] then t[sec][tier] = {} end
                    table.insert(t[sec][tier], s)
                end
            end
        end
    end)
    --print_r(t)
    return t
end)()

local create_arty = alife_create_item
bind_anomaly_zone.alife_create_item = function(section, obj, t)
    local section = section
    if valid_artys[section] then
        local variationizer_tier = artefact_chances[math.random(#artefact_chances)]
        local arty = artefact_by_variationizer_tier[section][variationizer_tier]
        section = arty[math.random(#arty)]
        printf("picked variationizer artefact %s", section)
    end
    return create_arty(section, obj, t)
end
