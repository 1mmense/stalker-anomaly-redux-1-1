--[[
Wrapper class to let you autoinject things via monkey patch to all traders, respecting the restock time.
How to use: Monkey patch the update function here in your script.
ex:
TraderAuto = trader_autoinject.update
function trader_autoinject.update(npc)
    TraderAuto(npc)
    add_custom_crap(npc) -- you define this function ok
end

Some functions provided below for convenience.
Note: If you want to iterate NPC inventory to check for items, fire a time event to allow the items to register on new game.



coppied and merged with bas_trade_inject to avoid compatibility issues with other mods
--]] --


find = string.find
local function t2c(t)
	if not t then return nil end
	local ct = game.CTime()
	ct:set(t.Y,t.M,t.D,t.h,t.m,t.s,t.ms)
	return ct
end

local function c2t(ct)
	if not ct then return nil end
	-- printf('%s, %s',ct,type(ct))
	local Y, M, D, h, m, s, ms = 0, 0, 0, 0, 0, 0, 0
	Y, M, D, h, m, s, ms = ct:get(Y, M, D, h, m, s, ms)
	return { Y=Y, M=M, D=D, h=h, m=m, s=s, ms=ms }
end

TraderUpdate = trade_manager.update
function trade_manager.update(npc, force_refresh)

    local id = npc:id()
    local reup_time = trade_manager.get_trade_profile(id, "resupply_time")
    TraderUpdate(npc, force_refresh)
    local restock_time = game_difficulties.get_eco_factor("restock") or 24
    if force_refresh then restock_time = 0 end
	if reup_time and game.get_game_time():diffSec(t2c(reup_time)) < (restock_time * 3600)  then
		-- print_dbg("Not time to resupply yet!")

        return
	end
    disable_info("sleep_active")
    CreateTimeEvent("custom_update_artefact_signature_locator"..npc:id(), "custom_update_artefact_signature_locator"..npc:id(), 0.1, timed_update, npc)

end

function timed_update(npc)
    update(npc)
    return true
end

-- monkeypatch me
function update(npc)
	spawn_stock(npc)
end

-- return supply level of npc, like suppy_1, supply_2, etc
-- as_number removes the supply_ prefix and only returns as int
function supply_level(npc, as_number)

    local profile = trade_manager.get_trade_profile(npc:id(), "cfg_ltx")
    -- printf("Profile is %s", profile)
    local config = trade_manager.get_trade_cfg(profile)    
    if not config then return end
	local str = config:r_string_ex("trader", "buy_supplies")
	if not (str) then 
		return -- no buy_supplies this is normal
	end

	local condlist = xr_logic.parse_condlist(npc, "trader", "buy_supplies", str)
	str = condlist and xr_logic.pick_section_from_condlist(db.actor, npc, condlist)
    if as_number then
        local num = str_explode(str, "_")
        return tonumber(num[2])
    else   
        return str
    end
end


-- to_spawn should be table of sections to amount
-- if check_existing is true, only spawns up to that amount in trader inventory. else arbitrarily spawns
local furniture = {
    ["esc_m_trader"] = true,
    ["yan_stalker_sakharov"] = true,
	["red_m_lesnik"] = true
}
function spawn_items(npc, to_spawn, check_existing)
    local npc_name = npc:name()
    local alive_or_furniture = xr_conditions.is_alive(db.actor, npc) or furniture[npc_name]
    if not alive_or_furniture then return end
    local supply_table = {}
    copy_table(supply_table, to_spawn)
    if check_existing then
		local function itr_inv(temp, item)
			if supply_table[item:section()] and supply_table[item:section()] > 0 then
				-- printf("Found 1 of %s", item:section())
                supply_table[item:section()] = supply_table[item:section()] - 1
			end
		end
		npc:iterate_inventory(itr_inv)
    end
    
    for k,v in pairs(supply_table) do
        for i=1, v do
            alife_create_item(k, npc)
        end
    end
end


function load_state(m_data)
    if m_data.tm_custom then m_data.tm_custom = nil end
end
function on_game_start()
    RegisterScriptCallback("load_state",load_state)
end



--[[

Custom trade injector made for CW weapon pack and modified for BaS.

Author: HarukaSai
Credits: Arti, for creating trader_autoinject.script and being amazing

Last edit: 19-10-2021
]]

-- this is where you add custom trade profiles for specific dudes
-- by default only suppliers are able to sell faction stuff
-- you can bypass this by adding trader in this table
-- [name that you can see when you look at npc in debug] = ini_file("path to your ini")
local ini_by_name = {
	["jup_b6_scientist_nuclear_physicist"] = ini_file("items\\trade_artifact_signature_localizer\\trade_ecolog_hermann.ltx")	
}

function get_ini_by_name(name)
	for ikey, ivalue in pairs(ini_by_name) do
		if string.len(name)>=string.len(ikey)  and string.sub(name, 1, string.len(ikey)) == ikey then
			return ivalue
		end
	end 
	return nil
end

local to_array = utils_data.parse_ini_section_to_array
local math_random = math.random

function spawn_stock(npc)
    local npc_name = npc:name()

    local has_custom = get_ini_by_name(npc_name)
    if not (has_custom) then 
		return 
	end

    local supply_level = supply_level(npc) or "common_supplies"
    local ini_trade = get_ini_by_name(npc_name) 
    local supply_table = to_array(ini_trade, supply_level)
    if not supply_table then
        printf("! Trader has no supplies [%s] - [%s]", npc_name, supply_level)
        return
    end

    local to_spawn = {}
    for item, amount in pairs(supply_table) do
        local str_amount = str_explode(amount, ",")
        to_spawn[item] = chance_for_each(tonumber(str_amount[1]), tonumber(str_amount[2]))
    end

    spawn_items(npc, to_spawn)
end


function chance_for_each(n, chance)
    local total = 0

    for i = 1, n do
        if math_random() < chance then
            total = total + 1
        end
    end

    return total
end
